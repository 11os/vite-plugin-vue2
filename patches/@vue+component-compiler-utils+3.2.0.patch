diff --git a/node_modules/@vue/component-compiler-utils/dist/templateCompilerModules/utils.js b/node_modules/@vue/component-compiler-utils/dist/templateCompilerModules/utils.js
index fc49cb3..f124725 100644
--- a/node_modules/@vue/component-compiler-utils/dist/templateCompilerModules/utils.js
+++ b/node_modules/@vue/component-compiler-utils/dist/templateCompilerModules/utils.js
@@ -7,38 +7,36 @@ exports.urlToRequire = void 0;
 const url_1 = require("url");
 const path_1 = __importDefault(require("path"));
 function urlToRequire(url, transformAssetUrlsOption = {}) {
-    const returnValue = `"${url}"`;
+    if(isExternalUrl(url) || isDataUrl(url)) {
+        return url
+    }
     // same logic as in transform-require.js
     const firstChar = url.charAt(0);
-    if (firstChar === '~') {
+    if (firstChar    === '~') {
         const secondChar = url.charAt(1);
         url = url.slice(secondChar === '/' ? 2 : 1);
     }
     const uriParts = parseUriParts(url);
-    if (transformAssetUrlsOption.base) {
-        // explicit base - directly rewrite the url into absolute url
-        // does not apply to absolute urls or urls that start with `@`
-        // since they are aliases
-        if (firstChar === '.' || firstChar === '~') {
-            // when packaged in the browser, path will be using the posix-
-            // only version provided by rollup-plugin-node-builtins.
-            return `"${(path_1.default.posix || path_1.default).join(transformAssetUrlsOption.base, uriParts.path + (uriParts.hash || ''))}"`;
-        }
-        return returnValue;
+    if (!uriParts.hash) {
+        return `require("${url}")`;
     }
-    if (firstChar === '.' || firstChar === '~' || firstChar === '@') {
-        if (!uriParts.hash) {
-            return `require("${url}")`;
-        }
-        else {
-            // support uri fragment case by excluding it from
-            // the require and instead appending it as string;
-            // assuming that the path part is sufficient according to
-            // the above caseing(t.i. no protocol-auth-host parts expected)
-            return `require("${uriParts.path}") + "${uriParts.hash}"`;
-        }
+    else {
+        // support uri fragment case by excluding it from
+        // the require and instead appending it as string;
+        // assuming that the path part is sufficient according to
+        // the above caseing(t.i. no protocol-auth-host parts expected)
+        return `require("${uriParts.path}") + "${uriParts.hash}"`;
     }
-    return returnValue;
+}
+
+const externalRE = /^https?:\/\//
+function isExternalUrl(url) {
+  return externalRE.test(url)
+}
+
+const dataUrlRE = /^\s*data:/i
+function isDataUrl(url) {
+  return dataUrlRE.test(url)
 }
 exports.urlToRequire = urlToRequire;
 /**
